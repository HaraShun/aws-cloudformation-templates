AWSTemplateFormatVersion: 2010-09-09
Description: AWSCloudFormationTemplates/static-web-hosting creates a Network Load Balancer and EC2 instances for Web Servers.

Parameters:
  AutoScalingConfig:
    Type: String
    Default: Enabled
    AllowedValues:
      - Enabled
      - Disabled
  AutoScalingDesiredCapacity:
    Type: Number
    Default: 1
    MinValue: 0
  AutoScalingMaxSize:
    Type: Number
    Default: 1
    MinValue: 0
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
      - a
      - b
      - c
      - d
  AvailabilityZone2:
    Type: String
    Default: c
    AllowedValues:
      - a
      - b
      - c
      - d
  EC2ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-068a6cefc24c301d2
  EC2InstanceType:
    Type: String
    Default: t3.micro
  EC2KeyName:
    Type: String
    Default: ''
  EC2VolumeSize:
    Type: Number
    Default: 8
    MinValue: 8
  SubnetPublicCidrBlockForAz1:
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: ^[0-9./]*$
  SubnetExternalCidrBlockForAz1:
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: ^[0-9./]*$
  SubnetPublicCidrBlockForAz2:
    Type: String
    Default: 10.0.4.0/24
    AllowedPattern: ^[0-9./]*$
  SubnetExternalCidrBlockForAz2:
    Type: String
    Default: 10.0.5.0/24
    AllowedPattern: ^[0-9./]*$
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/21
    AllowedPattern: ^[0-9./]*$
  TagKey:
    Type: String
    Default: createdby
  TagValue:
    Type: String
    Default: aws:cloudformation:stack

Conditions:
  AutoScalingEnabled:
    !Equals [ !Ref AutoScalingConfig, Enabled ]
  AutoScalingDisabled:
    !Equals [ !Ref AutoScalingConfig, Disabled ]
  PrivateSubnet1Exists:
    !Not [ !Equals [ !Ref SubnetExternalCidrBlockForAz1, '' ] ]
  PrivateSubnet2Exists:
    !Not [ !Equals [ !Ref SubnetExternalCidrBlockForAz2, '' ] ]
  KeyExists:
    !Not [ !Equals [ !Ref EC2KeyName, '' ] ]

Resources:
  # Subnet
  Az1:
    DependsOn:
      # NATGateway requires provisioned Internet Gateway.
      - InternetGatewayAttachment
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AvailabilityZone: !Ref AvailabilityZone1
        InternetGatewayId: !Ref InternetGateway
        NetworkLoadBalancer: !If 
         - AutoScalingEnabled
         - Enabled
         - Disabled
        PrefixOfLogicalName: !Ref AWS::StackName
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz1
        SubnetExternalCidrBlock: !Ref SubnetExternalCidrBlockForAz1
        VPCId: !Ref VPC
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue
      NotificationARNs: 
        - !Ref SNSAlert
      TemplateURL: https://eijikominami.s3-ap-northeast-1.amazonaws.com/aws-cloudformation-templates/web-servers/az.yaml
  Az2:
    DependsOn:
      # NATGateway requires provisioned Internet Gateway.
      - InternetGatewayAttachment
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AvailabilityZone: !Ref AvailabilityZone2
        InternetGatewayId: !Ref InternetGateway
        NetworkLoadBalancer: !If 
         - AutoScalingEnabled
         - Enabled
         - Disabled
        PrefixOfLogicalName: !Ref AWS::StackName
        SubnetPublicCidrBlock: !Ref SubnetPublicCidrBlockForAz2
        SubnetExternalCidrBlock: !Ref SubnetExternalCidrBlockForAz2
        VPCId: !Ref VPC
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      NotificationARNs: 
        - !Ref SNSAlert
      TemplateURL: https://eijikominami.s3-ap-northeast-1.amazonaws.com/aws-cloudformation-templates/web-servers/az.yaml
  AutoScaling:
    Condition: AutoScalingEnabled
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        AutoScalingDesiredCapacity: !Ref AutoScalingDesiredCapacity
        AutoScalingMaxSize: !Ref AutoScalingMaxSize
        EC2IamInstanceProfileARN: !GetAtt InstanceProfileForIAMRoleForEC2.Arn
        EC2ImageId: !Ref EC2ImageId
        EC2InstanceType: !Ref EC2InstanceType
        EC2KeyName: !Ref EC2KeyName
        EC2SecurityGroupId: !Ref SecurityGroupWeb
        EC2VolumeSize: !Ref EC2VolumeSize
        EipAllocationId1ForNLB: !GetAtt Az1.Outputs.NetworkLoadBalancerIPAllocationId
        EipAllocationId2ForNLB: !GetAtt Az2.Outputs.NetworkLoadBalancerIPAllocationId
        PrefixOfLogicalName: !Ref AWS::StackName
        SubnetId1ForNLB: !GetAtt Az1.Outputs.SubnetId
        SubnetId2ForNLB: !GetAtt Az2.Outputs.SubnetId
        SNSTopicARN: !Ref SNSAlert
        VPCId: !Ref VPC
        TagKey: !Ref TagKey
        TagValue: !Ref TagValue 
      NotificationARNs: 
        - !Ref SNSAlert
      TemplateURL: https://eijikominami.s3-ap-northeast-1.amazonaws.com/aws-cloudformation-templates/web-servers/autoscaling.yaml
  # Service-linked Role
  ServiceLinkedRoleForSSM:
    Type: 'AWS::IAM::ServiceLinkedRole'
    DeletionPolicy: Retain
    Properties: 
      AWSServiceName: ssm.amazonaws.com
      Description: Provides access to AWS Resources managed or used by Amazon SSM.  
  # IAM
  IAMRoleForVPCFlowLog:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-AWSVPCFlowLogCloudWatchAccess-${AWS::Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
      RoleName: !Sub '${AWS::StackName}-AWSVPCFlowLogRole-${AWS::Region}'
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IAMRoleForEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
      RoleName: !Sub '${AWS::StackName}-AWSEC2Role-${AWS::Region}'
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # InstanceProfile
  InstanceProfileForIAMRoleForEC2:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Ref IAMRoleForEC2
      Roles: 
        - !Ref IAMRoleForEC2
  # VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
      CidrBlock: !Ref VPCCidrBlock
      Tags:
        - Key: Name
          Value: !Sub vpc-${AWS::StackName}-${AWS::Region}
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Internet GW
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub igw-${AWS::StackName}-${AWS::Region}
        - Key: !Ref TagKey
          Value: !Ref TagValue
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  # Elastic IP
  EIPForEC2Instance:
    Condition: AutoScalingDisabled
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub eip-${AWS::StackName}-${AWS::Region}-ec2
        - Key: !Ref TagKey
          Value: !Ref TagValue
  EIPAssociation:
    Condition: AutoScalingDisabled
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt EIPForEC2Instance.AllocationId
      InstanceId: !Ref EC2
  # EC2
  EC2:
    Condition: AutoScalingDisabled
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EC2VolumeSize
            VolumeType: gp2
      EbsOptimized: true
      IamInstanceProfile: !Ref InstanceProfileForIAMRoleForEC2
      ImageId: !Ref EC2ImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref EC2InstanceType
      KeyName: !If
        - KeyExists
        - !Ref EC2KeyName
        - !Ref AWS::NoValue
      Monitoring: true
      SecurityGroupIds: 
        - !Ref SecurityGroupWeb
      SubnetId: !GetAtt Az1.Outputs.SubnetId
      Tags: 
        - Key: Name
          Value: !Sub ec2-${AWS::StackName}-${AWS::Region}
        - Key: !Ref TagKey
          Value: !Ref TagValue
  # Security Group
  SecurityGroupWeb:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      # 'sg-' prefix is NOT permitted.
      GroupName: !Sub sgp-${AWS::StackName}-${AWS::Region}-web
      GroupDescription: Security Group for Web Server
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: http
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
        - CidrIp: 0.0.0.0/0
          Description: https
          FromPort: 443
          ToPort: 443
          IpProtocol: TCP
        - CidrIp: 0.0.0.0/0
          Description: icmp
          FromPort: -1
          ToPort: -1
          IpProtocol: ICMP
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub sgp-${AWS::StackName}-${AWS::Region}-web
        - Key: !Ref TagKey
          Value: !Ref TagValue
      VpcId: !Ref VPC
  # VPC FlowLog
  VPCFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties: 
      DeliverLogsPermissionArn: !GetAtt IAMRoleForVPCFlowLog.Arn
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref CloudWatchLogsGroupForVPCFlowLog
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
  CloudWatchLogsGroupForVPCFlowLog:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/vpc/${AWS::StackName}'
      RetentionInDays: 60
  # SNS
  SNSAlert:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: !Sub 'System Notifications from ${AWS::StackName}'
      TopicName: !Sub '${AWS::StackName}-system-notifications'
  # CloudWatch Alarm
  AlarmSNSNumberOfNotificationsFailed:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSAlert
      AlarmDescription: !Sub '*SNS* (${AWS::StackName}) で *通知エラー* が発生しています。'
      AlarmName: !Sub 'Notice-${AWS::StackName}-SNS-NumberOfNotificationsFailed-Occured'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: TopicName
          Value: !GetAtt SNSAlert.TopicName
      EvaluationPeriods: 1
      MetricName: NumberOfNotificationsFailed
      Namespace: AWS/SNS
      OKActions:
        - !Ref SNSAlert
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
  EC2StatusCheckFailed:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSAlert
      AlarmDescription: '*EC2* で *ステータスチェックエラー* が発生しています。'
      AlarmName: !Sub 'Warning-${AWS::StackName}-EC2-StatusCheckFailed'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: StatusCheckFailed
      Namespace: AWS/EC2
      OKActions:
        - !Ref SNSAlert
      Period: 60
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
  EC2CPUUtilization:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSAlert
      AlarmDescription: '*EC2* で *CPU使用率が上昇* しています。'
      AlarmName: !Sub 'Notice-${AWS::StackName}-EC2-CPU-Overloaded'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      OKActions:
        - !Ref SNSAlert
      Period: 60
      Statistic: Average
      Threshold: 70
      TreatMissingData: notBreaching
  NatGatewayPacketsDropCount:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSAlert
      AlarmDescription: '*NatGateway* で *パケット破棄* が発生しています。'
      AlarmName: !Sub 'Notice-${AWS::StackName}-NatGateway-PacketsDropCount'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: PacketsDropCount
      Namespace: AWS/NATGateway
      OKActions:
        - !Ref SNSAlert
      Period: 60
      Statistic: Maximum
      Threshold: 1
      TreatMissingData: notBreaching
  NatGatewayErrorPortAllocation:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSAlert
      AlarmDescription: '*NatGateway* で *送信先ポートが割り当てられませんでした* 。'
      AlarmName: !Sub 'Notice-${AWS::StackName}-NatGateway-ErrorPortAllocation'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: ErrorPortAllocation
      Namespace: AWS/NATGateway
      OKActions:
        - !Ref SNSAlert
      Period: 60
      Statistic: Maximum
      Threshold: 1
      TreatMissingData: notBreaching
  # SSM
  MaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties: 
      AllowUnassociatedTargets: false
      Cutoff: 1
      Description: !Sub Create a backup AMI from ${AWS::StackName} EC2 instances at every midnights.
      Duration: 2
      Name: !Sub EveryMidnightsFor${AWS::StackName}
      Schedule: cron(0 2 * * ? *)
      ScheduleTimezone: Asia/Tokyo
      Tags: 
        - Key: !Ref TagKey
          Value: !Ref TagValue
  MaintenanceWindowTarget:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties: 
      Description: !Sub Create a backup AMI from ${AWS::StackName} EC2 instances.
      Name: !Ref AWS::StackName
      ResourceType: INSTANCE
      Targets: !If
        - AutoScalingDisabled
        - - Key: InstanceIds
            Values: 
              - !Ref EC2
        - !Ref AWS::NoValue
      WindowId: !Ref MaintenanceWindow
  MaintenanceWindowTask:
    DependsOn:
      - ServiceLinkedRoleForSSM
    Type: AWS::SSM::MaintenanceWindowTask
    Properties: 
      Description: !Sub Create a backup AMI from ${AWS::StackName} EC2 instances.
      MaxConcurrency: '1'
      MaxErrors: '1'
      Name: !Sub CreateImageOf${AWS::StackName}
      Priority: 0
      ServiceRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM
      Targets: 
        - Key: WindowTargetIds
          Values: 
            - !Ref MaintenanceWindowTarget
      TaskArn: AWS-CreateImage
      TaskInvocationParameters:
        MaintenanceWindowAutomationParameters:
          DocumentVersion: $LATEST
          Parameters: !If
           - AutoScalingDisabled
           - InstanceId:
             - !Ref EC2
           - !Ref AWS::NoValue
      TaskType: AUTOMATION
      WindowId: !Ref MaintenanceWindow

Outputs:
  VPCCidrBlock:
    Description: VPC CIDR Block
    Value: !GetAtt VPC.CidrBlock   
  EC2IP:
    Condition: AutoScalingDisabled
    Description: EC2 IP address
    Value: !Ref EIPForEC2Instance
  NatGatewayIP1:
    Condition: PrivateSubnet1Exists
    Description: NatGateway IP address
    Value: !GetAtt Az1.Outputs.NatGatewayIP
  NetworkLoadBalancerIP1:
    Condition: AutoScalingEnabled
    Description: NetworkLoadBalancer IP
    Value: !GetAtt Az1.Outputs.NetworkLoadBalancerIP
  NatGatewayIP2:
    Condition: PrivateSubnet2Exists
    Description: NatGateway IP address
    Value: !GetAtt Az2.Outputs.NatGatewayIP
  NetworkLoadBalancerIP2:
    Condition: AutoScalingEnabled
    Description: NetworkLoadBalancer IP address
    Value: !GetAtt Az2.Outputs.NetworkLoadBalancerIP
